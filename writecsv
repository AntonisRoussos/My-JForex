package jforex;
 
import java.util.*;
import java.io.*;
import java.text.*;
 
import com.dukascopy.api.*;

@RequiresFullAccess
public class ExportToCSV implements IStrategy {
   private IEngine engine;
   private IConsole console;
   private IHistory history;
   private IContext context;
   private IIndicators indicators;
   private IUserInterface userInterface;
     
    @Configurable("Instrument")
    public Instrument instrument = Instrument.EURUSD;
 
    @Configurable("Period")
    public Period period = Period.ONE_MIN;
     
    @Configurable("OfferSide")
    public OfferSide offerSide = OfferSide.BID;

    @Configurable("DaysBack")
    public int daysBack = 4;
 
    @Configurable("EMA time period")
    public int emaTimePeriod = 5;
 
    @Configurable("MACD Fast time period")
    public int macdFastTimePeriod = 12;

    @Configurable("MACD Slow time period")
    public int macdSlowTimePeriod = 26;

    @Configurable("MACD Signal time period")
    public int macdSignalTimePeriod = 9;

    @Configurable("RSI time period")
    public int rsiTimePeriod = 14;

    @Configurable("File")
    public File file;
     
    private Writer out;
    private DateFormat dateFormat;
    private DecimalFormat priceFormat;
 
    public void onStart(IContext context) throws JFException {
      this.engine = context.getEngine();
      this.console = context.getConsole();
      this.history = context.getHistory();
      this.context = context;
      this.indicators = context.getIndicators();
      this.userInterface = context.getUserInterface();
         
        dateFormat = new SimpleDateFormat("yyyy.MM.dd,HH:mm");
        dateFormat.setTimeZone(TimeZone.getTimeZone("GMT"));
         
        priceFormat = new DecimalFormat("0.#####");
 
        if (file == null || file.getPath().equals("")) {
            console.getErr().println("File not selected");
            context.stop();
            return;
        }
        try {
            out = new BufferedWriter(new FileWriter(file));
        } catch (Exception e) {
            console.getErr().println(e.getMessage());
            e.printStackTrace(console.getErr());
            context.stop();
        }
    }
 
   public void onAccount(IAccount account) throws JFException {
   }
 
   public void onMessage(IMessage message) throws JFException {
   }
 
   public void onStop() throws JFException {
        if (out != null) {
            try {
                out.close();
            } catch (Exception e) {
                console.getErr().println(e.getMessage());
                e.printStackTrace(console.getErr());
                context.stop();
            }
        }
   }
 
   public void onTick(Instrument instrument, ITick tick) throws JFException {
   }
   
   public void onBar(Instrument instrument, Period period, IBar askBar, IBar bidBar) throws JFException {
        if (instrument != this.instrument || period != this.period) {
            return;
        }
        private IBar previousBar[];
	int candlesBefore = daysBack, candlesAfter = 0;
        IBar bar = offerSide == OfferSide.ASK ? askBar : bidBar;
        previousBar[0] = bar;
    	long currBarTime = barar.getTime();
	double ema[] = indicators.ema(instrument, period, offerSide, IIndicators.AppliedPrice.CLOSE,
        	emaTimePeriod, Filter.NO_FILTER, candlesBefore, currBarTime, candlesAfter);
	double macd[][] = indicators.macd(instrument, period, offerSide, IIndicators.AppliedPrice.CLOSE,
        	macdFastTimePeriod, macdSlowTimePeriod, macdSignalTimePeriod,Filter.NO_FILTER, candlesBefore, currBarTime, candlesAfter);
	double rsi[] = indicators.rsi(instrument, period, offerSide, IIndicators.AppliedPrice.CLOSE,
        	rsiTimePeriod, Filter.NO_FILTER, candlesBefore, currBarTime, candlesAfter);
	int cdlEngulfing[] = indicators.cdlEngulfing(instrument, period, offerSide, Filter.NO_FILTER, candlesBefore, currBarTime, candlesAfter);

        try {
            out.write(dateFormat.format(bar.getTime()) + "," + priceFormat.format(bar.getOpen()) + "," + priceFormat.format(bar.getHigh()) + ","
                    + priceFormat.format(bar.getLow()) + "," + priceFormat.format(bar.getClose()) + "," + priceFormat.format(askBar.getVolume()) + ","
                    + priceFormat.format(ema[daysBack]) + "," + priceFormat.format(macd[3][daysBack]) + "," + priceFormat.format(rsi[daysBack]) + "," 
                    + priceFormat.format(cdlEngulfing[daysBack]));
        } catch (Exception e) {
            console.getErr().println(e.getMessage());
            e.printStackTrace(console.getErr());
            context.stop();
        }


	for(int i = 1; i = daysBack; i++) {
	        previousBar[i] = history.getBar(myInstrument, myPeriod, myOfferSide, i);
	        try {
	            out.write("," + priceFormat.format(previousBar[i].getOpen()) + "," + priceFormat.format(previousBar[i].getHigh()) + ","
	                    + priceFormat.format(previousBar[i].getLow()) + "," + priceFormat.format(previousBar[i].getClose()) + "," 
	                    + priceFormat.format(previousBar[i].getVolume())+ "," + priceFormat.format(ema[daysBack-1]) + "," 
	                    + priceFormat.format(macd[3][daysBack-1]) + "," + priceFormat.format(rsi[daysBack-1]) + "," 
                    	    + priceFormat.format(cdlEngulfing[daysBack-1]));
	        } catch (Exception e) {
	            console.getErr().println(e.getMessage());
	            e.printStackTrace(console.getErr());
	            context.stop();
	        }
	        
	}
	
        try {
	    out.write("\r\n");
        } catch (Exception e) {
            console.getErr().println(e.getMessage());
            e.printStackTrace(console.getErr());
            context.stop();
        }

   }
}
